import org.apache.spark.rdd.RDD
val ratings = sc.textFile("/hw4/dataset/ratings.dat")
val ratingsData = ratings.map(x => x.split("::"))
val movies = ratingsData.filter(x => (x(0).toInt == 2828 && x(2).toInt == 3)).map(x => x(1))
movies.foreach(println)


val similarityMatrix = sc.textFile("/hw4/dataset/ratings_similarity_matrix")

def convertSimilarityMatrix(x:Array[String]): Array[String] = {
    var i = 1
    var a:Array[String] = new Array[String](x.length - 1)
    while ( i < x.length){
        a(i - 1) = x(i).split(":")(0)
        i = i +  1
    }
    a
}

val moviesData = similarityMatrix.map(x => x.replace("\t", " ").split(" ")).map(x => (x(0), convertSimilarityMatrix(x)))
val inpMovies = movies.map(x => (x,x))

val reqMovies = inpMovies.join(moviesData)
reqMovies.foreach(x => println(x._1 + "\t" +x._2._2.mkString(",")))

val hMap = Map()
val movieFiles = sc.textFile("/hw4/dataset/movies.dat")
val movieDetails = movieFiles.map(x => x.split("::")).foreach(x => hMap.put(x(0), x(1))


def getMovieName(x:String): String = {
    val movieFiles = sc.textFile("/hw4/dataset/movies.dat")
    val movieDetails = movieFiles.map(x => x.split("::")).map(x => (x(0), x(1)))
    println(x)
    val b = movieDetails.lookup(x)(0)
    val r = x + ":" + b
    r
}
reqMovies.foreach(x => println(x._1 + "\t" + x._2._2.foreach(y => getMovieName(y))))

val rMovies = reqMovies.map(x => (x._2._2.foreach(y => (y, x._1))))

